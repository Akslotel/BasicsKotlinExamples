package org.example.variables

import java.util.*
import kotlin.math.*

fun main() {

}

fun textFunctions() {
    val text = "  Kotlin Programming Language  "

// 1. Изменение регистра
    println("В верхний регистр: ${text.uppercase(Locale.getDefault())}")  // Преобразование строки в верхний регистр
    println("В нижний регистр: ${text.lowercase(Locale.getDefault())}")  // Преобразование строки в нижний регистр

// 2. Обрезка пробелов
    println("Текст без пробелов: '${text.trim()}'")  // Удаление пробелов в начале и в конце строки

// 3. Проверка, начинается ли строка с определённой подстроки
    println("Начинается с 'Kotlin': ${text.trim().startsWith("Kotlin")}")  // Проверка начала строки

// 4. Проверка, заканчивается ли строка на определённую подстроку
    println("Заканчивается на 'Language': ${text.trim().endsWith("Language")}")  // Проверка конца строки

// 5. Проверка наличия подстроки
    println("Содержит 'Programming': ${text.contains("Programming")}")  // Проверка наличия подстроки

// 6. Замена подстроки
    println("Заменить 'Kotlin' на 'Java': ${text.replace("Kotlin", "Java")}")  // Замена одной подстроки на другую

// 7. Получение подстроки
    println("Подстрока (0, 6): ${text.substring(0, 6)}")  // Извлечение подстроки от индекса 0 до 6

// 8. Разделение строки
    val words = text.trim().split(" ")  // Разделение строки по пробелам
    println("Слова: $words")

// 9. Преобразование в массив символов
    val charArray = text.toCharArray()
    println("Массив символов: ${charArray.contentToString()}")  // Преобразование строки в массив символов

// 10. Повтор строки
    println("Повтор текста: ${text.repeat(2)}")  // Повтор строки два раза

// 11. Проверка на пустоту или наличие только пробелов
    println("Строка пустая: ${text.isEmpty()}")  // Проверка на пустую строку
    println("Строка содержит только пробелы: ${text.isBlank()}")  // Проверка на строку, состоящую только из пробелов

// 12. Поиск индекса подстроки
    println("Индекс 'Programming': ${text.indexOf("Programming")}")  // Поиск индекса подстроки
}

fun numberFunctions() {
    val intNumber: Int = -42
    val doubleNumber: Double = 42.75
    val floatNumber: Float = 42.5f
    val longNumber: Long = 123456789L

// 1. Получение абсолютного значения числа
    println("Абсолютное значение -42: ${intNumber.absoluteValue}")  // Вывод: 42

// 2. Округление числа с плавающей точкой
    println("Округлённое значение 42.75: ${doubleNumber.roundToInt()}")  // Округление до ближайшего целого числа, вывод: 43
    println("Округление вниз 42.75: ${doubleNumber.roundToLong()}")  // Округление вниз до ближайшего целого числа: 43

// 3. Округление до ближайшего целого числа с плавающей точкой (для Double)
    println("Округление в меньшую сторону для 42.75: ${doubleNumber.toInt()}")  // Отбрасываем дробную часть, вывод: 42
    println(
        "Округление в большую сторону для 42.75: ${
            doubleNumber.toBigDecimal().setScale(0, java.math.RoundingMode.CEILING)
        }"
    ) // Вывод: 43

// 4. Минимальное и максимальное значение
    println("Минимум между -42 и 100: ${minOf(intNumber, 100)}")  // Вывод: -42 (меньшее из двух чисел)
    println("Максимум между -42 и 100: ${maxOf(intNumber, 100)}")  // Вывод: 100 (большее из двух чисел)

// 5. Генерация случайного числа в диапазоне
    val randomInt = (1..100).random()
    println("Случайное число между 1 и 100: $randomInt")

// 6. Проверка чётности числа
    println("Чётное ли число 42? ${intNumber.absoluteValue % 2 == 0}")  // Проверка чётности: true

// 7. Возведение в степень
    val power = 2.0.pow(3)
    println("2 в степени 3: $power")  // Вывод: 8.0

// 8. Квадратный корень
    val sqrtValue = kotlin.math.sqrt(doubleNumber)
    println("Квадратный корень из 42.75: $sqrtValue")  // Вывод: ~6.54

// 9. Округление до заданного количества знаков после запятой
    val roundedToTwoDecimals = String.format("%.2f", doubleNumber)
    println("42.75 округлено до 2 знаков после запятой: $roundedToTwoDecimals")  // Вывод: 42.75
}

fun mathFunctions() {
    val number: Double = 42.75
    val negativeNumber: Double = -42.75
    val base: Double = 2.0
    val exponent: Double = 3.0

// 1. Возведение числа в степень
// Функция pow() используется для возведения base в степень exponent.
    println("2 в степени 3: ${base.pow(exponent)}")  // Вывод: 8.0

// 2. Извлечение квадратного корня
// sqrt() возвращает квадратный корень числа.
    println("Квадратный корень из 42.75: ${sqrt(number)}")  // Вывод: ~6.54

// 3. Натуральный логарифм (логарифм по основанию e)
// Функция ln() вычисляет натуральный логарифм числа.
    println("Натуральный логарифм числа 42.75: ${ln(number)}")  // Вывод: ~3.75

// 4. Логарифм по основанию 10
// log10() возвращает логарифм числа по основанию 10.
    println("Логарифм числа 42.75 по основанию 10: ${log10(number)}")  // Вывод: ~1.63

// 5. Экспонента (e в степени числа)
// Функция exp() возвращает e (экспоненциальную постоянную) в степени указанного числа.
    println("e в степени 3: ${exp(exponent)}")  // Вывод: ~20.09

// 6. Округление числа до ближайшего целого
// round() округляет число до ближайшего целого значения (по правилам математического округления).
    println("Округлённое значение 42.75: ${round(number)}")  // Вывод: 43.0

// 7. Округление числа вверх
// ceil() округляет число до ближайшего целого значения в большую сторону.
    println("Округление вверх для 42.75: ${ceil(number)}")  // Вывод: 43.0

// 8. Округление числа вниз
// floor() округляет число до ближайшего целого значения в меньшую сторону.
    println("Округление вниз для 42.75: ${floor(number)}")  // Вывод: 42.0

// 9. Абсолютное значение числа
// abs() возвращает абсолютное значение (модуль) числа.
    println("Абсолютное значение числа -42.75: ${abs(negativeNumber)}")  // Вывод: 42.75

// 10. Тригонометрические функции (синус, косинус, тангенс)
// Функции sin(), cos() и tan() работают с углами в радианах.
// Math.PI / 4 эквивалентно 45 градусам (π/4 = 45°).
    val angle = Math.PI / 4
    println("sin(45 градусов): ${sin(angle)}")  // Вывод: ~0.707
    println("cos(45 градусов): ${cos(angle)}")  // Вывод: ~0.707
    println("tan(45 градусов): ${tan(angle)}")  // Вывод: ~1.0

// 11. Обратные тригонометрические функции (арксинус, арктангенс)
// asin() вычисляет обратный синус (арксинус), а atan() — обратный тангенс (арктангенс).
    println("Арксинус для 0.707: ${asin(0.707)}")  // Вывод: ~0.785 (около 45 градусов)
    println("Арктангенс для 1.0: ${atan(1.0)}")  // Вывод: ~0.785 (около 45 градусов)

// 12. Значение числа Pi
// PI — это встроенная константа, представляющая значение числа π (3.14159...).
    println("Значение числа Pi: $PI")  // Вывод: 3.141592653589793

// 13. Экспоненциальная постоянная e
// E — это встроенная константа, представляющая число e (2.71828...).
    println("Значение числа e: $E")  // Вывод: 2.718281828459045
}